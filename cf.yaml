Parameters:
  ReadCapacityUnits:
    Description: Provisioned read throughput
    Type: Number
    Default: '1'
    MinValue: '1'
    MaxValue: '2'
    ConstraintDescription: must be between 5 and 10000
  WriteCapacityUnits:
    Description: Provisioned write throughput
    Type: Number
    Default: '1'
    MinValue: '1'
    MaxValue: '2'
    ConstraintDescription: must be between 5 and 10000
  TableName:
    Type: String
    Default: customers_table
  ApiName:
    Type: String
    Default: customers_api
    Description: â€˜creation of api'

Resources:
  MyApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: myapirole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ["apigateway.amazonaws.com","lambda.amazonaws.com"]
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
  CustomerInfo:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref 'TableName'
      KeySchema:
        -
          AttributeName: "id"
          KeyType: HASH
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref 'ReadCapacityUnits'
        WriteCapacityUnits: !Ref 'WriteCapacityUnits'
  CustomerApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name:
        Ref: ApiName
    DependsOn:
      - CustomerInfo
  CustomerResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: CustomerApi
      ParentId:
        Fn::GetAtt:
          - CustomerApi
          - RootResourceId
      PathPart: "id"
  ExampleOPTIONS:
    DependsOn: CustomerApi
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !Ref CustomerResource
      RestApiId: !Ref CustomerApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  CustomerGet:
    DependsOn: CustomerApi
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: CustomerApi
      ResourceId:
        Ref: CustomerResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Credentials: !Sub arn:aws:iam::${AWS::AccountId}:role/myapirole
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan"
        RequestTemplates:
          application/json: >-
            {
                "TableName": "customers_table",
                "Key":{
                    "id": {
                    }
                }
            }
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: 200
            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: 200

  CustomerDeploy:
    DependsOn:
      - CustomerApi
      - CustomerGet
      - CustomerResource
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId:
        Ref: CustomerApi
      Description: "Deployment for this customer api"
      StageName: 'prod'
